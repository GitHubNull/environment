name: Maven Release

on:
  push:
    tags:
      - 'v*'

jobs:
  build-and-release:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v3
        with:
          fetch-depth: 0  # 获取完整的 Git 历史记录用于生成日志

      - name: Set up Java
        uses: actions/setup-java@v3
        with:
          java-version: '17'
          distribution: 'temurin'
          cache: maven

      - name: Build with Maven
        run: mvn -B package --file pom.xml

      - name: Find generated JAR file
        id: find_jar
        run: |
          JAR_FILE=$(ls target/environment-*.jar | head -n 1)
          if [ -z "$JAR_FILE" ]; then
            echo "::error::No JAR file found in target directory"
            exit 1
          fi
          echo "JAR_FILE=$JAR_FILE" >> $GITHUB_ENV

      - name: Generate Release Notes
        id: generate_release_notes
        run: |
          # 获取当前标签名称
          CURRENT_TAG=${{ github.ref_name }}

          # 获取前一个标签（如果存在）
          PREVIOUS_TAG=$(git describe --tags --abbrev=0 ${CURRENT_TAG}^ 2>/dev/null || echo "")

          # 生成提交日志
          if [ -z "$PREVIOUS_TAG" ]; then
            COMMIT_LOG=$(git log --pretty=format:'- %s (%h)')
          else
            COMMIT_LOG=$(git log ${PREVIOUS_TAG}..${CURRENT_TAG} --pretty=format:'- %s (%h)')
          fi

          # 写入文件（使用 Markdown 格式并保留换行）
          {
            echo "## 版本 $CURRENT_TAG 发布说明"
            echo ""
            echo "本次更新包含以下变更："
            echo ""
            echo "$COMMIT_LOG"
            echo ""
            echo "> 由 GitHub Actions 自动生成"
          } > release_notes.md

      - name: Create Release
        id: create_release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ github.ref_name }}
          release_name: Release ${{ github.ref_name }}
          body_path: release_notes.md  # 从文件读取内容（自动保留换行）
          draft: false
          prerelease: false

      - name: Upload Release Asset
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: ${{ env.JAR_FILE }}
          asset_name: environment-${{ github.ref_name }}.jar
          asset_content_type: application/java-archive