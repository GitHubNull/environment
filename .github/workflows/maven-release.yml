name: Maven Release

# 触发条件：当有新的 tag 被推送到仓库时
on:
  push:
    tags:
      - 'v*'

jobs:
  build-and-release:
    runs-on: ubuntu-latest

    steps:
      # 步骤 1：检出代码
      - name: Checkout code
        uses: actions/checkout@v3

      # 步骤 2：设置 Java 环境
      - name: Set up Java
        uses: actions/setup-java@v3
        with:
          java-version: '17'
          distribution: 'temurin'
          cache: maven

      # 步骤 3：使用 Maven 编译项目
      - name: Build with Maven
        run: mvn -B package --file pom.xml

      # 步骤 4：列出 target 目录内容（调试步骤）
      - name: List target directory contents
        run: ls -l target/

      # 步骤 5：动态获取生成的 JAR 文件路径
      - name: Find generated JAR file
        id: find_jar
        run: |
          if [ -z "$(ls target/environment-*.jar 2>/dev/null)" ]; then
            echo "Error: No JAR file found in target directory."
            exit 1
          fi
          JAR_FILE=$(ls target/environment-*.jar | head -n 1)
          echo "JAR_FILE=$JAR_FILE" >> $GITHUB_ENV

      # 新增步骤：动态生成发布说明
      - name: Generate Release Notes
        id: generate_release_notes
        run: |
          # 检查是否为首次创建 tag
          PREVIOUS_TAG=$(git describe --tags --abbrev=0 @^ || echo "")
          if [ -z "$PREVIOUS_TAG" ]; then
            RELEASE_NOTES=$(git log --pretty=format:'- %s')
          else
            RELEASE_NOTES=$(git log $PREVIOUS_TAG..@ --pretty=format:'- %s')
          fi
          
          # 如果没有提交记录，则提供默认说明
          if [ -z "$RELEASE_NOTES" ]; then
            RELEASE_NOTES="- 无明确的提交记录"
          fi
          
          # 优化措辞并保存到环境变量
          RELEASE_BODY="## 版本 ${{ github.ref_name }} 发布说明\n \
          本次版本更新包含以下改进和修复\n \
          ${RELEASE_NOTES}\n"
          echo "RELEASE_BODY=\"$RELEASE_BODY\"" >> $GITHUB_ENV

      # 步骤 6：创建 Release
      - name: Create Release
        id: create_release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ github.ref_name }}
          release_name: Release ${{ github.ref_name }}
          body: |
            ${{ env.RELEASE_BODY }}
          draft: false
          prerelease: false

      # 步骤 7：上传 JAR 包到 Release
      - name: Upload Release Asset
        id: upload-release-asset
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: ${{ env.JAR_FILE }}
          asset_name: environment-${{ github.ref_name }}.jar
          asset_content_type: application/java-archive

